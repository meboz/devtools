#! /usr/bin/env ruby
#
# This scripts runs on remote puppetmasters that you wish to import their nodes facts into Foreman
# it uploads all of the new facts its encounter based on a control file which is stored in /tmp directory.
# This script can run in cron, e.g. once every minute
# if you run it on many puppetmasters at the same time, you might consider adding something like:
# sleep rand(10) # that not all PM hammers the DB at once.
# ohadlevy@gmail.com


SETTINGS = {
  :url          => "<%= scope.lookupvar('foreman::url')%>",
  :puppetdir    => "<%= scope.lookupvar('foreman::puppet_data_dir')%>",
  :facts        => "<%= scope.lookupvar('foreman::bool_facts')%>",
  :storeconfigs => "<%= scope.lookupvar('foreman::bool_storeconfigs')%>",
  :timeout      => 3,
  # if CA is specified, remote Foreman host will be verified
  :ssl_ca       => "<%= scope.lookupvar('foreman::ssl_ca') -%>",
  # ssl_cert and key are required if require_ssl_puppetmasters is enabled in Foreman
  :ssl_cert     => "<%= scope.lookupvar('foreman::ssl_cert') -%>",
  :ssl_key      => "<%= scope.lookupvar('foreman::ssl_key') -%>",
}

### Do not edit below this line

def url
  SETTINGS[:url] || raise("Must provide URL - please edit file")
end

def puppetdir
  SETTINGS[:puppetdir] || raise("Must provide puppet base directory - please edit file")
end

def stat_file
  "#{puppetdir}/foreman_push_facts"
end

def tsecs
  SETTINGS[:timeout] || 3
end

require 'fileutils'
require 'net/http'
require 'net/https'
require 'uri'

last_run = File.exists?(stat_file) ? File.stat(stat_file).mtime.utc : Time.now - 365*60*60

Dir["#{puppetdir}/yaml/facts/*.yaml"].each do |filename|
  last_fact = File.stat(filename).mtime.utc
  if last_fact > last_run
    fact = File.read(filename)
    puts "Importing #{filename}"
    begin
      uri = URI.parse(url)
      req = Net::HTTP::Post.new("/fact_values/create?format=yml")
      req.set_form_data({'facts' => fact})
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = uri.scheme == 'https'
      if http.use_ssl?
        if SETTINGS[:ssl_ca]
          http.ca_file = SETTINGS[:ssl_ca]
          http.verify_mode = OpenSSL::SSL::VERIFY_PEER
        else
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        end
        if SETTINGS[:ssl_cert] and SETTINGS[:ssl_key]
           http.cert = OpenSSL::X509::Certificate.new(File.read(SETTINGS[:ssl_cert]))
           http.key  = OpenSSL::PKey::RSA.new(File.read(SETTINGS[:ssl_key]), nil)
        end
      end
      response = http.request(req)
    rescue Exception => e
      raise "Could not send facts to Foreman: #{e}"
    end
  end
end
FileUtils.touch stat_file